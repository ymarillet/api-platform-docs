webpackJsonp([0xd03729da1e80],{381:function(n,a){n.exports={data:{post:{html:'<h1 id="getting-started"><a href="#getting-started" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h1>\n<h2 id="installation"><a href="#installation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>\n<p>Install the skeleton and the library:</p>\n<p>Start by installing <a href="https://yarnpkg.com/" target="_blank" rel="nofollow noopener noreferrer">the Yarn package manager</a> (<a href="https://www.npmjs.com/" target="_blank" rel="nofollow noopener noreferrer">NPM</a> is also supported) and\nthe <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="nofollow noopener noreferrer">Create React App</a> tool.</p>\n<p>Then, create a new React application for your admin:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ create-react-app my-admin</code></pre>\n      </div>\n<p>React and React DOM will be directly provided as dependencies of Admin On REST. As having different versions of React\ncauses issues, remove <code>react</code> and <code>react-dom</code> from the <code>dependencies</code> section of the generated <code>package.json</code> file:</p>\n<div class="gatsby-highlight">\n      <pre class="language-patch"><code>-    "react": "^15.6.1",\n-    "react-dom": "^15.6.1"</code></pre>\n      </div>\n<p>Finally, install the <code>@api-platform/admin</code> library:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ yarn add @api-platform/admin</code></pre>\n      </div>\n<h2 id="creating-the-admin"><a href="#creating-the-admin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating the Admin</h2>\n<p>Edit the <code>src/App.js</code> file like the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> HydraAdmin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@api-platform/admin\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>HydraAdmin entrypoint<span class="token operator">=</span><span class="token string">"https://demo.api-platform.com"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Replace with your own API entrypoint</span>\n</code></pre>\n      </div>\n<p>Your new administration interface is ready! Type <code>yarn start</code> to try it!</p>\n<p>Note: if you don\'t want to hardcode the API URL, you can <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-custom-environment-variables" target="_blank" rel="nofollow noopener noreferrer">use an environment variable</a>.</p>\n<h2 id="customizing-the-admin"><a href="#customizing-the-admin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customizing the Admin</h2>\n<p>The API Platform\'s admin parses the Hydra documentation exposed by the API and transforms it to an object data structure. This data structure can be customized to add, remove or customize resources and properties. To do so, we can leverage the <code>AdminBuilder</code> component provided by the library. It\'s a lower level component than the <code>HydraAdmin</code> one we used in the previous example. It allows to access to the object storing the structure of admin\'s screens.</p>\n<h3 id="using-custom-components"><a href="#using-custom-components" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using Custom Components</h3>\n<p>In the following example, we change components used for the <code>description</code> property of the <code>books</code> resource to ones accepting HTML (respectively <code>RichTextField</code> that renders HTML markup and <code>RichTextInput</code>, a WYSWYG editor).\n(To use the <code>RichTextInput</code>, the <code>aor-rich-text-input</code> package is must be installed: <code>yarn add aor-rich-text-input</code>).</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> RichTextField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'admin-on-rest\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> RichTextInput <span class="token keyword">from</span> <span class="token string">\'aor-rich-text-input\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> HydraAdmin <span class="token keyword">from</span> <span class="token string">\'api-platform-admin/lib/hydra/HydraAdmin\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parseHydraDocumentation <span class="token keyword">from</span> <span class="token string">\'api-doc-parser/lib/hydra/parseHydraDocumentation\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> entrypoint <span class="token operator">=</span> <span class="token string">\'https://demo.api-platform.com\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">apiDocumentationParser</span> <span class="token operator">=</span> entrypoint <span class="token operator">=></span> <span class="token function">parseHydraDocumentation</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>api <span class="token operator">=></span> <span class="token punctuation">{</span>\n    api<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>resource <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> books <span class="token operator">=</span> api<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>r <span class="token operator">=></span> <span class="token string">\'books\'</span> <span class="token operator">===</span> r<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      books<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>f <span class="token operator">=></span> <span class="token string">\'description\'</span> <span class="token operator">===</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>fieldComponent <span class="token operator">=</span> <span class="token operator">&lt;</span>RichTextField source<span class="token operator">=</span><span class="token string">"description"</span> key<span class="token operator">=</span><span class="token string">"description"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n      books<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>f <span class="token operator">=></span> <span class="token string">\'description\'</span> <span class="token operator">===</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>inputComponent <span class="token operator">=</span> <span class="token operator">&lt;</span>RichTextInput source<span class="token operator">=</span><span class="token string">"description"</span> key<span class="token operator">=</span><span class="token string">"description"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> resource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> api<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>HydraAdmin apiDocumentationParser<span class="token operator">=</span><span class="token punctuation">{</span>apiDocumentationParser<span class="token punctuation">}</span> entrypoint<span class="token operator">=</span><span class="token punctuation">{</span>entrypoint<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The <code>fieldComponent</code> property of the <code>Field</code> class allows to set the component used to render a property in list and show screens.\nThe <code>inputComponent</code> property allows to set the component to use to render the input used in create and edit screens.</p>\n<p>Any <a href="https://marmelab.com/admin-on-rest/Fields.html" target="_blank" rel="nofollow noopener noreferrer">field</a> or <a href="https://marmelab.com/admin-on-rest/Inputs.html" target="_blank" rel="nofollow noopener noreferrer">input</a> provided by the Admin On Rest library can be used.</p>\n<p>To go further, take a look to the "<a href="https://marmelab.com/admin-on-rest/CustomApp.html" target="_blank" rel="nofollow noopener noreferrer">Including admin-on-rest on another React app</a>" documentation page of Admin On Rest to learn how to use directly redux, react-router, and redux-saga along with components provided by this library.</p>\n<h3 id="managing-files-and-images"><a href="#managing-files-and-images" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Managing Files and Images</h3>\n<p>In the following example, we will:</p>\n<ul>\n<li>find every <a href="http://schema.org/ImageObject" target="_blank" rel="nofollow noopener noreferrer">ImageObject</a> resources. For each <a href="http://schema.org/contentUrl" target="_blank" rel="nofollow noopener noreferrer">contentUrl</a> fields, we will use <a href="https://marmelab.com/admin-on-rest/Fields.html#imagefield" target="_blank" rel="nofollow noopener noreferrer">ImageField</a> as <code>field</code> and <a href="https://marmelab.com/admin-on-rest/Inputs.html#imageinput" target="_blank" rel="nofollow noopener noreferrer">ImageInput</a> as <code>input</code>.</li>\n<li><a href="https://marmelab.com/admin-on-rest/Inputs.html#imageinput" target="_blank" rel="nofollow noopener noreferrer">ImageInput</a> will return a <a href="https://developer.mozilla.org/en/docs/Web/API/File" target="_blank" rel="nofollow noopener noreferrer">File</a> instance. In this example, we will send a multi-part form data to a special action (<code>https://demo.api-platform.com/images/upload</code>). The action will return the ID of the uploaded image. We will "replace" the <a href="https://developer.mozilla.org/en/docs/Web/API/File" target="_blank" rel="nofollow noopener noreferrer">File</a> instance by the ID in <code>normalizeData</code>.</li>\n<li>As <code>contentUrl</code> fields will return a string, we have to convert Hydra data to AOR data. This action will be done by <code>denormalizeData</code>.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FunctionField<span class="token punctuation">,</span> ImageField<span class="token punctuation">,</span> ImageInput <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'admin-on-rest/lib/mui\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> HydraAdmin <span class="token keyword">from</span> <span class="token string">\'api-platform-admin/lib/hydra/HydraAdmin\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parseHydraDocumentation <span class="token keyword">from</span> <span class="token string">\'api-doc-parser/lib/hydra/parseHydraDocumentation\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> entrypoint <span class="token operator">=</span> <span class="token string">\'https://demo.api-platform.com\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">apiDocumentationParser</span> <span class="token operator">=</span> entrypoint <span class="token operator">=></span> <span class="token function">parseHydraDocumentation</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>api <span class="token operator">=></span> <span class="token punctuation">{</span>\n    api<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>resource <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'http://schema.org/ImageObject\'</span> <span class="token operator">===</span> resource<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        resource<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>field <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'http://schema.org/contentUrl\'</span> <span class="token operator">===</span> field<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            field<span class="token punctuation">.</span><span class="token function-variable function">denormalizeData</span> <span class="token operator">=</span> value <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n              src<span class="token punctuation">:</span> value\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            field<span class="token punctuation">.</span>fieldComponent <span class="token operator">=</span> <span class="token punctuation">(</span>\n              <span class="token operator">&lt;</span>FunctionField\n                key<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n                render<span class="token operator">=</span><span class="token punctuation">{</span>\n                  record <span class="token operator">=></span> <span class="token punctuation">(</span>\n                    <span class="token operator">&lt;</span>ImageField key<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">.</span>name<span class="token punctuation">}</span> record<span class="token operator">=</span><span class="token punctuation">{</span>record<span class="token punctuation">}</span> source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.src`</span></span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n                  <span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n                source<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n              <span class="token operator">/</span><span class="token operator">></span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            field<span class="token punctuation">.</span>inputComponent <span class="token operator">=</span> <span class="token punctuation">(</span>\n              <span class="token operator">&lt;</span>ImageInput accept<span class="token operator">=</span><span class="token string">"image/*"</span> key<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">.</span>name<span class="token punctuation">}</span> multiple<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> source<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">></span>\n                <span class="token operator">&lt;</span>ImageField source<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">/</span><span class="token operator">></span>\n              <span class="token operator">&lt;</span><span class="token operator">/</span>ImageInput<span class="token operator">></span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            field<span class="token punctuation">.</span><span class="token function-variable function">normalizeData</span> <span class="token operator">=</span> value <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rawFile <span class="token keyword">instanceof</span> <span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rawFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entrypoint<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/images/upload`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> body<span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token string">\'POST\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">return</span> value<span class="token punctuation">.</span>src<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token keyword">return</span> field<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> resource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> api<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>HydraAdmin apiDocumentationParser<span class="token operator">=</span><span class="token punctuation">{</span>apiDocumentationParser<span class="token punctuation">}</span> entrypoint<span class="token operator">=</span><span class="token punctuation">{</span>entrypoint<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><strong>Note</strong>: In this example, we choose to send the file via a multi-part form data, but you are totally free to use another solution (like <code>base64</code>). But keep in mind that multi-part form data is the most efficient solution.</p>\n<h3 id="using-a-custom-validation-function-or-inject-custom-props"><a href="#using-a-custom-validation-function-or-inject-custom-props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using a Custom Validation Function or Inject Custom Props</h3>\n<p>You can use <code>fieldProps</code> and <code>inputProps</code> to respectively inject custom properties to fields and inputs generated by API\nPlatform Admin. This is particularly useful to add custom validation rules:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AdminBuilder<span class="token punctuation">,</span> hydraClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'api-platform-admin\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parseHydraDocumentation <span class="token keyword">from</span> <span class="token string">\'api-doc-parser/lib/hydra/parseHydraDocumentation\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> entrypoint <span class="token operator">=</span> <span class="token string">\'https://demo.api-platform.com\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>api<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">parseHydraDocumentation</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>api <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> books <span class="token operator">=</span> api<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>r <span class="token operator">=></span> <span class="token string">\'books\'</span> <span class="token operator">===</span> r<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      books<span class="token punctuation">.</span>writableFields<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>f <span class="token operator">=></span> <span class="token string">\'description\'</span> <span class="token operator">===</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>inputProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n        validate<span class="token punctuation">:</span> value <span class="token operator">=></span> value<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">30</span> <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token string">\'Minimum length: 30\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>api<span class="token punctuation">:</span> api<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>api<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>AdminBuilder api<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>api<span class="token punctuation">}</span> restClient<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">hydraClient</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>'
},navDoc:{edges:[{node:{title:"The Distribution",path:"distribution",items:[{id:"index",title:"Creating a Fully Featured API in 5 Minutes",anchors:null},{id:"testing",title:"Testing and Specifying the API",anchors:null}]}},{node:{title:"The API Component",path:"core",items:[{id:"index",title:"Introduction",anchors:null},{id:"getting-started",title:"Getting Started",anchors:[{id:"installing-api-platform-core",title:"Installing API Platform Core"},{id:"before-reading-this-documentation",title:"Before Reading this Documentation"},{id:"mapping-the-entities",title:"Mapping the Entities"}]},{id:"configuration",title:"Configuration",anchors:null},{id:"operations",title:"Operations",anchors:[{id:"enabling-and-disabling-operations",title:"Enabling and Disabling Operations"},{id:"configuring-operations",title:"Configuring Operations"},{id:"subresources",title:"Subresources"},{id:"creating-custom-operations-and-controllers",title:"Creating Custom Operations and Controllers"}]},{id:"default-order",title:"Overriding Default Order",anchors:null},{id:"filters",title:"Filters",anchors:[{id:"doctrine-orm-filters",title:"Doctrine ORM Filters"},{id:"serializer-filters",title:"Serializer Filters"},{id:"creating-custom-filters",title:"Creating Custom Filters"}]},{id:"serialization",title:"The Serialization Process",anchors:[{id:"overall-process",title:"Overall Process"},{id:"available-serializers",title:"Available Serializers"},{id:"the-serialization-context-groups-and-relations",title:"The Serialization Context, Groups and Relations"},{id:"embedding-relations",title:"Using Different Serialization Groups per Operation"},{id:"embedding-relations",title:"Embedding Relations"},{id:"changing-the-serialization-context-dynamically",title:"Changing the Serialization Context Dynamically"},{id:"name-conversion",title:"Name Conversion"},{id:"entity-identifier-case",title:"Entity Identifier Case"},{id:"writable-entity-identifier",title:"Writable Entity Identifier"},{id:"embedding-the-json-ld-context",title:"Embedding the JSON-LD Context"},{id:"decorating-a-serializer-and-add-extra-data",title:"Decorating a Serializer and Add Extra Data"}]},{id:"content-negotiation",title:"Content Negotiation",anchors:[{id:"enabling-several-formats",title:"Enabling Several Formats"},{id:"registering-a-custom-serializer",title:"Registering a Custom Serializer"},{id:"creating-a-responder",title:"Creating a Responder"},{id:"writing-a-custom-normalizer",title:"Writing a Custom Normalizer"}]},{id:"validation",title:"Validation",anchors:[{id:"using-validation-groups",title:"Using Validation Groups"},{id:"dynamic-validation-groups",title:"Dynamic Validation Groups"}]},{id:"pagination",title:"Pagination",anchors:[{id:"disabling-the-pagination",title:"Disabling the Pagination"},{id:"changing-the-number-of-items-per-page",title:"Changing the Number of Items per Page"}]},{id:"events",title:"The Event System",anchors:null},{id:"data-providers",title:"Data Providers",anchors:[{id:"creating-a-custom-data-provider",title:"Custom Collection Data Provider"},{id:"returning-a-paged-collection",title:"Custom Item Data Provider"}]},{id:"extensions",title:"Extensions",anchors:[{id:"custom-extension",title:"Custom Extension"},{id:"example",title:"Filter upon the current user"}]},{id:"jwt",title:"JWT Authentification",anchors:[{id:"installing-lexikjwtauthenticationnundle",title:"Installing LexikJWTAuthenticationBundle"},{id:"documenting-the-authentication-mechanism-with-swagger-open-api",title:"Documenting the Authentication Mechanism with Swagger/Open API"},{id:"testing-with-behat",title:"Testing with Behat"}]},{id:"security",title:"Security",anchors:null},{id:"swagger",title:"Swagger Support",anchors:[{id:"overriding-the-swagger-documentation",title:"Overriding the Swagger documentation"},{id:"using-the-swagger-context",title:"Using the Swagger Context"}]},{id:"performance",title:"Performance",anchors:[{id:"enabling-the-builtin-http-cache-invalidation-system",title:"Enabling the Builtin HTTP Cache Invalidation System"},{id:"enabling-the-metadata-cache",title:"Enabling the Metadata Cache"},{id:"using-ppm-php-pm",title:"Using PPM (PHP-PM)"},{id:"doctrine-queries-and-indexes",title:"Doctrine Queries and Indexes"}]},{id:"operation-path-naming",title:"Operation Path Naming",anchors:[{id:"configuration",title:"Configuration"},{id:"create-a-custom-operation-path-resolver",title:"Create a Custom Operation Path Naming"}]},{id:"form-data",title:'Accept "application/x-www-form-urlencoded" Form Data',anchors:null},{id:"external-vocabularies",title:"Using External Vocabularies",anchors:null},{id:"extending-jsonld-context",title:"Extending the JSON-LD context",anchors:null},{id:"fosuser-bundle",title:"FOSUserBundle Integration",anchors:[{id:"installing-the-bundle",title:"Installing the Bundle"},{id:"enabling-the-bridge",title:"Enabling the Bridge"},{id:"creating-a-user-entity-with-serialization-groups",title:'Creating a "User" Entity with Serialization Groups'}]},{id:"nelmio-api-doc",title:"NelmioApiDocBundle integration",anchors:null},{id:"angularjs-integration",title:"AngularJS Integration",anchors:[{id:"restangular",title:"Restangular"},{id:"ng-admin",title:"ng-admin"}]}]}},{node:{title:"The Schema Generator Component",path:"schema-generator",items:[{id:"index",title:"Introduction",anchors:null},{id:"getting-started",title:"Getting Started",anchors:null},{id:"configuration",title:"Configuration",anchors:null}]}},{node:{title:"The Admin Component",path:"admin",items:[{id:"index",title:"Introduction",anchors:[{id:"features",title:"Features"}]},{id:"getting-started",title:"Getting Started",anchors:[{id:"installation",title:"Installation"},{id:"creating-the-admin",title:"Creating the Admin"},{id:"customizing-the-admin",title:"Customizing the Admin"}]},{id:"authentication-support",title:"Authentication Support",anchors:null},{id:"handling-relations-to-collections",title:"Handling Relations to Collections",anchors:[{id:"using-an-autocomplete-input-for-relations",title:"Using an Autocomplete Input for Relations"}]}]}},{node:{title:"The Client Generator Component",path:"client-generator",items:[{id:"index",title:"Introduction",anchors:[{id:"features",title:"Features"}]},{id:"react",title:"React generator",anchors:null},{id:"vuejs",title:"Vue.js generator",anchors:null},{id:"troubleshooting",title:"Troubleshooting",anchors:null}]}},{node:{title:"Deployment",path:"deployment",items:[{id:"index",title:"Introduction",anchors:null},{id:"heroku",title:"Deploying an API Platform App on Heroku",anchors:null},{id:"docker",title:"Using API Platform with Docker",anchors:[{id:"services",title:"Services"},{id:"installation",title:"Installation"}]}]}},{node:{title:"Extra",path:"extra",items:[{id:"philosophy",title:"The Project's Philosophy",anchors:null},{id:"troubleshooting",title:"Troubleshooting",anchors:null},{id:"contribution-guides",title:"Contribution Guides",anchors:null},{id:"conduct",title:"Contributor Code Of Conduct",anchors:null}]}}]}},pathContext:{path:"docs/admin/getting-started",current:{path:"docs/admin/getting-started",title:"The Admin Component - Getting Started"},prev:{path:"docs/admin/index",title:"Introduction",rootPath:"The Admin Component"},next:{path:"docs/admin/authentication-support",title:"Authentication Support",rootPath:"The Admin Component"}}}}});
//# sourceMappingURL=path---docs-admin-getting-started-9ac00ca14bc9788584f8.js.map